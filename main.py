import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.client.bot import DefaultBotProperties
from flask import Flask
import threading
import os

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
HIDDEN_CHANNEL_ID = -1002570163026  # ID –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(
    token=BOT_TOKEN,
    session=AiohttpSession(),
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä–æ–±–æ—Ç–∏ –ø–æ—Ä—Ç—É
app = Flask(__name__)

@app.route("/")
def index():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=5000)

# –°–ø–∏—Å–æ–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω, —è–∫—ñ –æ—á—ñ–∫—É—é—Ç—å –º–æ–¥–µ—Ä–∞—Ü—ñ—ó
pending_messages = {}

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
INSTRUCTION_TEXT = (
    "üìã <b>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–æ—Ç–∞:</b>\n\n"
    "üîπ <b>–ö—É–¥–∏ –ø–æ—Ç—Ä–∞–ø–ª—è—î –Ω–æ–≤–∏–Ω–∞:</b> –í–∞—à—ñ –Ω–æ–≤–∏–Ω–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω—ñ —É –∫–∞–Ω–∞–ª—ñ ChatGPT Ukraine.\n"
    "1Ô∏è‚É£ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –¥–æ–∫—É–º–µ–Ω—Ç, —â–æ–± –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —Å–≤–æ—é –Ω–æ–≤–∏–Ω—É.\n"
    "2Ô∏è‚É£ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Ä–æ–∑–≥–ª—è–Ω–µ –≤–∞—à—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –≤–∏—Ä—ñ—à–∏—Ç—å, —á–∏ –ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ —ó—ó.\n"
    "3Ô∏è‚É£ –Ø–∫—â–æ –Ω–æ–≤–∏–Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞, –≤–æ–Ω–∞ –±—É–¥–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–∞ —É –∫–∞–Ω–∞–ª—ñ.\n\n"
    "üìå <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n"
    "- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ –Ω–æ–≤–∏–Ω–∏ ‚Äî 1000 –∑–Ω–∞–∫—ñ–≤. –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –¥–æ–≤—à–∏–π, –≤—ñ–Ω –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.\n"
    "- –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è (–∂–∏—Ä–Ω–∏–π, –∫—É—Ä—Å–∏–≤) —Ç–∞ –∞–Ω–∫–æ—Ä–∏ –Ω–µ –∑–±–µ—Ä–µ–∂—É—Ç—å—Å—è.\n"
    "- –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞–¥—Å–∏–ª–∞–π—Ç–µ —É –≤–∏–≥–ª—è–¥—ñ —Ç–µ–∫—Å—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://example.com).\n\n"
    "üîí <b>–í–∞—à–µ —ñ–º'—è –±—É–¥–µ –∞–Ω–æ–Ω—ñ–º–Ω–∏–º.</b> –Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ, —â–æ–± –≤–∞—Å –∑–≥–∞–¥–∞–ª–∏, –¥–æ–¥–∞–π—Ç–µ —Å–≤–æ—î —ñ–º'—è —É —Ç–µ–∫—Å—Ç—ñ.\n\n"
    "üõ† <b>–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
    "/start - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è\n"
    "/help - –û–ø–∏—Å —Å–∏—Å—Ç–µ–º–∏ —Ç—Ä–∏–≥–µ—Ä—ñ–≤\n"
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def generate_approve_keyboard(message_id: int):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve:{message_id}")],
            [InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject:{message_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit:{message_id}")]
        ]
    )

# –¢–µ–∫—Å—Ç, —è–∫–∏–π –¥–æ–¥–∞—î—Ç—å—Å—è –¥–æ –∫–æ–∂–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
FOOTER_TEXT = "\n\nüì© <b><a href='https://t.me/–ù–∞–∑–≤–∞–í–∞—à–æ–≥–æ–ë–æ—Ç–∞'>–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ù–æ–≤–∏–Ω—É</a></b>"

# –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    await message.answer(
        "üëã <b>–í—ñ—Ç–∞—î–º–æ —É –±–æ—Ç—ñ ChatGPT Ukraine!</b>\n\n"
        + INSTRUCTION_TEXT,
        parse_mode="HTML"
    )

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø—Ä–∏ –∫–æ–º–∞–Ω–¥—ñ /help
@dp.message(Command("help"))
async def show_help(message: Message):
    await message.answer(
        "üõ† <b>–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n\n" + INSTRUCTION_TEXT,
        parse_mode="HTML"
    )

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏–Ω –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@dp.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO, ContentType.DOCUMENT}))
async def handle_news(message: Message):
    global pending_messages
    pending_messages[message.message_id] = {
        "message": message,
        "media_type": message.content_type,
        "file_id": (
            message.photo[-1].file_id if message.photo else
            message.video.file_id if message.video else
            message.document.file_id if message.document else None
        ),
        "caption": message.text or message.caption or "üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ —Ç–µ–∫—Å—Ç—É"
    }

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
    if len(pending_messages[message.message_id]["caption"]) > 1000:
        await message.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –Ω–æ–≤–∏–Ω–∏ –ø–µ—Ä–µ–≤–∏—â—É—î 1000 –∑–Ω–∞–∫—ñ–≤. –í—ñ–Ω –±—É–¥–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–∏–π –Ω–∞ –∫—ñ–ª—å–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")
    else:
        await message.answer("‚úÖ –¢–≤–æ—è –Ω–æ–≤–∏–Ω–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é!")

    try:
        admin_message = f"üìù –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥ @{message.from_user.username or '–∞–Ω–æ–Ω—ñ–º–∞'}:\n{pending_messages[message.message_id]['caption']}"
        if message.photo:
            await bot.send_photo(
                ADMIN_ID,
                photo=message.photo[-1].file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.video:
            await bot.send_video(
                ADMIN_ID,
                video=message.video.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        elif message.document:
            await bot.send_document(
                ADMIN_ID,
                document=message.document.file_id,
                caption=admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
        else:
            await bot.send_message(
                ADMIN_ID,
                admin_message,
                reply_markup=generate_approve_keyboard(message.message_id)
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

# –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(F.data.startswith("approve"))
async def approve_news(callback: CallbackQuery):
    global pending_messages
    _, message_id = callback.data.split(":")
    message_data = pending_messages.pop(int(message_id), None)

    if message_data:
        try:
            if message_data["media_type"] == ContentType.PHOTO:
                await bot.send_photo(
                    HIDDEN_CHANNEL_ID,
                    photo=message_data["file_id"],
                    caption=message_data["caption"] + FOOTER_TEXT
                )
            elif message_data["media_type"] == ContentType.VIDEO:
                await bot.send_video(
                    HIDDEN_CHANNEL_ID,
                    video=message_data["file_id"],
                    caption=message_data["caption"] + FOOTER_TEXT
                )
            elif message_data["media_type"] == ContentType.DOCUMENT:
                await bot.send_document(
                    HIDDEN_CHANNEL_ID,
                    document=message_data["file_id"],
                    caption=message_data["caption"] + FOOTER_TEXT
                )
            else:
                await bot.send_message(
                    HIDDEN_CHANNEL_ID,
                    text=message_data["caption"] + FOOTER_TEXT
                )
            await callback.answer("‚úÖ –ù–æ–≤–∏–Ω—É –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –Ω–æ–≤–∏–Ω–∏: {e}")
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó.")
    else:
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")

# –í—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(F.data.startswith("reject"))
async def reject_news(callback: CallbackQuery):
    global pending_messages
    _, message_id = callback.data.split(":")
    if pending_messages.pop(int(message_id), None):
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
        await callback.message.edit_text("‚ùå –¶—è –Ω–æ–≤–∏–Ω–∞ –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
    else:
        await callback.answer("‚ùå –ù–æ–≤–∏–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∞!")

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω–∏
@dp.callback_query(F.data.startswith("edit"))
async def edit_news(callback: CallbackQuery):
    global pending_messages
    _, message_id = callback.data.split(":")
    message_data = pending_messages.get(int(message_id))

    if message_data:
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–∏–Ω–∏. –ú–µ–¥—ñ–π–Ω–∏–π —Ñ–∞–π–ª –∑–∞–ª–∏—à–∏—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω.")

        @dp.message(F.text)
        async def handle_edit_response(new_message: Message):
            updated_text = new_message.text
            message_data
